Description: >
    Udacity Project: Deploy a high-availability web app using CloudFormation

Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: An EnvironmentName use in tag
    Type: String

  MyVpcIPv4CIDR:
    Description: My VPC IPv4 CIDR Block
    Type: String
    Default: 10.0.0.0/16

  MyPuplicSubnetCIDR1:
    Description: My Public Subnet CIDR in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  
  MyPuplicSubnetCIDR2:
    Description: My Public Subnet CIDR in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  MyPrivateSubnetCIDR1:
    Description: My Private Subnet CIDR in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  MyPrivateSubnetCIDR2:
    Description: My Private Subnet CIDR in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
  
  MyDestinationCidrBlock:
    Description: My Destination Cidr Block
    Type: String
    Default: 0.0.0.0/0

  MyInstanceJumbox:
    Description: EC2 Instance Jumbox
    Type: String
    AllowedValues: [t2.micro, t3.micro]

  MyAMIJumbox:
    Description: AMI ID Jumbox
    Type: AWS::EC2::Image::Id

  MyInstanceMachine:
    Description: EC2 Instance Machine Type
    Type: String
    AllowedValues: [t2.medium, t3.medium]

  MyAMI:
    Description: AMI ID
    Type: AWS::EC2::Image::Id

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVpcIPv4CIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  
  myPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref myVPC
      CidrBlock: !Ref MyPuplicSubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet Zone 1
  
  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      VpcId: !Ref myVPC
      CidrBlock: !Ref MyPuplicSubnetCIDR2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet Zone 2

  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref myVPC
      CidrBlock: !Ref MyPrivateSubnetCIDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet Zone 1

  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref myVPC
      CidrBlock: !Ref MyPrivateSubnetCIDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet Zone 2

  myNatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: myVPCGatewayAttachment
    Properties:
      Domain: vpc
  
  myNatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt myNatGateway1EIP.AllocationId
      SubnetId: !Ref myPublicSubnet1

  myNatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: myVPCGatewayAttachment
    Properties:
      Domain: vpc
  
  myNatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt myNatGateway2EIP.AllocationId
      SubnetId: !Ref myPublicSubnet2

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Route Table

  myPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: !Ref MyDestinationCidrBlock
      GatewayId: !Ref myInternetGateway

  myPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet1
      RouteTableId: !Ref myPublicRouteTable
  
  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet2
      RouteTableId: !Ref myPublicRouteTable

  myPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route Table 1

  myPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      DestinationCidrBlock: !Ref MyDestinationCidrBlock
      GatewayId: !Ref myNatGateway1

  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet1
      RouteTableId: !Ref myPrivateRouteTable1
  
  myPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route Table 2

  myPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRouteTable2
      DestinationCidrBlock: !Ref MyDestinationCidrBlock
      GatewayId: !Ref myNatGateway2

  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet2
      RouteTableId: !Ref myPrivateRouteTable2

  myS3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3ReadOnly
      Path: "/"
      AssumeRolePolicyDocument: 
        Statement: 
          - Effect: Allow
            Principal: 
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  myS3ReadOnlyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadOnlyAccess
      PolicyDocument:  
        Statement:
          - Effect: Allow
            Action: 
              - s3:Get*
              - s3:List*
            Resource: 
              - arn:aws:s3:::udacity-demo-1
              - arn:aws:s3:::udacity-demo-1/*
      Roles:
        - !Ref myS3ReadOnlyRole
  
  myInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref myS3ReadOnlyRole

  myLoadBalanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myLoadBalanceSecurityGroup
      GroupDescription: Allow HTTP to Load Balance
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyDestinationCidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyDestinationCidrBlock

  myJumBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myJumBoxSecurityGroup
      GroupDescription: Allow SSH
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyDestinationCidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref MyDestinationCidrBlock

  myWebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myWebAppSecurityGroup
      GroupDescription: Allow HTTP to Web App
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyDestinationCidrBlock
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyDestinationCidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref MyDestinationCidrBlock

  myJumboxInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: jumbox-key
      ImageId: !Ref MyAMIJumbox
      InstanceType: !Ref MyInstanceJumbox
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref myJumBoxSecurityGroup
          SubnetId: !Ref myPublicSubnet1
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  myWebApplicationLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref MyAMI
      InstanceType: !Ref MyInstanceMachine
      KeyName: private-devops-key
      IamInstanceProfile: !Ref myInstanceProfile
      SecurityGroups:
        - !Ref myWebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3::/udacity-demo-1/index.html
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  myWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref myVPC

  myAutoScallingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
      LaunchConfigurationName: !Ref myWebApplicationLaunchConfiguration
      MaxSize: 2
      MinSize: 3
      TargetGroupARNs:
        - !Ref myWebAppTargetGroup

  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref myLoadBalanceSecurityGroup
      Subnets:
        - !Ref myPublicSubnet1
        - !Ref myPublicSubnet2
  
  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myWebAppTargetGroup
      LoadBalancerArn: !Ref myLoadBalancer
      Port: '80'
      Protocol: HTTP

  myListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref myWebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref myListener
        Priority: 1

  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties: 
  #     Roles:
  #       - UdacityS3ReadOnlyEC2
Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

  VPC:
    Description: A reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref myPublicSubnet1, !Ref myPublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref myPrivateSubnet1, !Ref myPrivateSubnet1 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-NETS

  WebAppLoadBalancerDNSName:
    Description: DNS name or Public URL of the Load Balancer
    Value: !Join [ "", [ 'http://', !GetAtt myLoadBalancer.DNSName ]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
